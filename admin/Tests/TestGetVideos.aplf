 TestGetVideos←{
     ⎕←'Test GET videos'
     ⍺←'http://localhost:8081/' ⋄ url←(AddTrailingSlash ⍺),'videos'
     G←url∘HttpGet
     fields←'category' 'description' 'event' 'event_shortname' 'presented_at' 'presenter' 'published_at' 'thumbnail' 'title' 'url' 'youtube_id'
     _←Assert∧/fields∊(G'')[1].⎕NL-⍳9   ⍝ all videos
     vid←'AFvfBE19OFg'                  ⍝ ⍰ known existing video youtube ID
     r←G,'/',vid                        ⍝ single video
     _←Assert∧/fields∊r.⎕NL-⍳9
     _←Assert vid≡r.youtube_id
     r←G,'////',vid                 ⍝ ignore multiple consecutive slashes
     _←Assert∧/fields∊r.⎕NL-⍳9
     r←G'?search=rich%20rank'       ⍝ ⍰ known valid search terms
     _←Assert∧/fields∊r[1].⎕NL-⍳9   ⍝ multiple search terms
     _←Assert∨/∨/¨'rich' 'rank'⍷⍥⎕C¨⊂⍕r.(description event presenter title)
     p←'Morten Kromberg' ⋄ q←'?presenter=Morten%20Kromberg'   ⍝ ⍰ known existing presenter
     _←Assert∧/p∘(∨/⍷)¨(G q).presenter                        ⍝ by presenter
     p←'Gitte Christensen' 'Stine Kromberg'
     q←'?presenter=Gitte+Christensen+Stine+Kromberg'          ⍝ multiple presenters
     _←Assert∧/p(∨/⍷)¨(G q).presenter
     evt←'Dyalog ''21' ⋄ q←'?event_shortname=dyalog-21'
     _←Assert∧/evt∘≡¨(G q).event             ⍝ by event
     q←'?event_shortname=webinar&sort=newest'
     _←Assert(⊢≡{⍵[⍒⍵]})(G q).presented_at
     q←'?event_shortname=webinar&sort=oldest'
     _←Assert(⊢≡{⍵[⍋⍵]})(G q).presented_at
     q←'?search=&presenter=&event='
     _←Assert∧/fields∊(G q)[1].⎕NL-⍳9        ⍝ all parameters empty
     q←'?sort=newest'
     _←Assert(⊢≡{⍵[⍒⍵]})(G q).presented_at   ⍝ sort by newest
     q←'?sort=oldest'
     _←Assert(⊢≡{⍵[⍋⍵]})(G q).presented_at   ⍝ sort by newest
     q←'?from=2021-05-01'
     _←Assert'2021 5 1'(∧/≤)_DateTimeCompare(G q).presented_at   ⍝ datefrom
     q←'?to=2020-01-01'
     _←Assert'2021 5 1'(∧/≥)_DateTimeCompare(G q).presented_at   ⍝ dateto
     q←'?from=2016-01-01&to=2018-01-01'
     _←Assert('2016 1 1' '2018 1 1')RangeContains _DateTimeCompare(G q).presented_at
     q←'?per_page=10'
     pf←⊆'current_page' 'last_page' 'first_page' 'per_page'   ⍝ fields for paginated responses
     pf,←⊆'first_page_url' 'last_page_url' 'prev_page_url' 'next_page_url'
     pf,←⊆'data' 'links' 'path'
     pf,←⊆'from' 'to' 'total'
     _←Assert∧/pf∊(G q).⎕NL-⍳9                   ⍝ paginated result
     q←'?per_page=10&page=3'
     _←Assert 3=(G q).current_page               ⍝ paginated result on particular page
     vid←'/NOTVALID'                             ⍝ invalid ID
     _←Assert 400=(##.HttpCommand.Get ⍺,'videos',vid).HttpStatus
     vid←'/RIGHTLENGTH'                          ⍝ video not found
     _←Assert 404=(##.HttpCommand.Get ⍺,vid).HttpStatus
     1
 }
