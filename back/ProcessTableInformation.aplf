 msg←ProcessTableInformation schema_definitions;UnknownColumnTypes;MapSQAPLTypeConversions;tc;TableName;ColumnsTypes;statements;tables;columns;types;conversions
⍝ Initialise resource information - column names and types
 msg←0
 ColumnsTypes←{
     col←⍵~'`'                                    ⍝ Remove backticks
     col←','(≠⊆⊢)1↓col⌿⍨≠\(<\∨(⌽<\∘⌽))'()'∊⍨col   ⍝ Extract text between outermost parentheses
     iscol←~'PRIMARY KEY'∘(∨/⍷⍥⎕C)¨col            ⍝ Ignore PRIMARY KEY
     ↓⍉↑2↑¨' '(≠⊆⊢)¨iscol/col                     ⍝ (column names)(types)
 }
 TableName←{   ⍝ Extract "table_name" from statements of the form "CREATE TABLE table_name"
     sql←' '∘(1↓,⊢⍤/⍨1(⊢∨⌽)0,≠)⍵
     '` '~⍨sql/⍨2=+\' '=sql
 }
 tc←↑' '(≠⊆⊢)¨(⎕UCS 10 13)((~∊⍨)⊆⊢)⊃⎕NGET #.GLOBAL.app_dir,'/back/sql/type_conversions.txt'
 #.GLOBAL.type_conversions←tc
 MapSQAPLTypeConversions←{
     t←⍵~⊂'KEY'                            ⍝ Primary key not a column
     w←' '@(0=≢¨){1↓⍵/⍨≠\⍵∊'()'}¨t         ⍝ Extract field widths e.g. 11 from int(11)
     bt←w ⎕R'⎕'⊢t                          ⍝ Replace field widths with blanks
     R←{∊(⊂⍺⍺)@(⍵⍵∘=)⊢⍵}                   ⍝ Replace blanks with field widths
     w{(⍺ R'⎕')⊢⍵}¨(tc⍪⊂'')[tc[;1]⍳bt;2]   ⍝ SQAPL type conversions (blank if not found)
 }
 UnknownColumnTypes←{
     ec←∊∘(⊂'')¨⍵ ⋄ t←∨/¨ec ⋄ rc←-∨/t    ⍝ empty columns; tables containing unknown types; return code (0 if none, ¯1 otherwise)
     0=rc:0 ''                           ⍝ All types known
     (ut uc)←t∘/¨(⊂ec)/¨¨types columns   ⍝ unknown types;  unknown columns
     UnknownTypeInColumn←{0∊⍴⍵:'' ⋄ ∊'Unknown type (',⍺,') in column (',⍵,')'}
     InTable←{⍺,' in table (',⍵,')'}
     msg←↑⊃,/(ut UnknownTypeInColumn¨¨uc)InTable¨¨⊂¨t/tables
     (rc)(msg)
 }
 #.GLOBAL.(tables type_defs type_sqapl)←⊂⍬
 :For schema :In schema_definitions
     statements←(StatementsFromSchema schema)~⊂''
     tables←TableName¨statements
     (columns types)←↓⍉↑ColumnsTypes¨statements
     conversions←MapSQAPLTypeConversions¨types
     msg←UnknownColumnTypes conversions
     #.GLOBAL.(tables type_defs type_sqapl),←tables types conversions
 :EndFor
