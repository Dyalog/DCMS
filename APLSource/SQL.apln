:Namespace SQL

    Check←{ 0≠⊃⍵:1 1⊂⍵ ⋄ 0 2⍴⍬'' }
    FromUTF8←'UTF-8'∘(⊣⎕UCS ⎕UCS)

    db←'db'   ⍝ SQAPL connector identifier
    SQA←⍬     ⍝ SQAPL API reference set on Connect

    :section SQAPL

    ∇ msg←Catch msg;en
      en←⊃msg
      :If 0<en       ⍝ Server error if database operation fails
          (3⊃msg)⎕SIGNAL 500
      :ElseIf 0>en   ⍝ Print warnings to session and continue
          ⎕←msg
      :EndIf
    ∇

    ∇ r←Connect datasource;src;opt
      SQA.Init''
      src←SQA.DSN'' ⋄ src←2⊃src
      :If ~(1⌷datasource)∊⍥⎕C⊣/src
          'opt'⎕NS ⍬ ⋄ opt.(wait timeout)←3 5 ⋄ opt.datasource←⊃datasource
          Reconnect opt
      :EndIf
      :If 0≠⊃r←SQA.Connect db,⍥⊆datasource
          ('Could not connect to ',⊃datasource)⎕SIGNAL⊃r
      :EndIf
      SQA.Do db'create database if not exists dyalog_cms'
      Use'dyalog_cms'
      ⎕←'Connected to SQL database'
    ∇

    ∇ r←Reconnect opt;src;timeout;found
      :Repeat
          Catch ¯1 'Attempting to find datasource ',opt.datasource,⊂'. ',(⍕opt.wait),' attempts remaining.'
          ⎕DL opt.timeout
          Catch src←SQA.DSN'' ⋄ src←2⊃src
          found←(1⌷datasource)∊⍥⎕C⊣/src
          opt.wait-←1 ⋄ timeout←opt.wait≤0
      :Until timeout∨found
      500 ⎕SIGNAL⍨'Datasource ',(⊃datasource),' not found.'
    ∇

    ∇ r←Use database
      r←Catch SQA.Do db('USE ',database)
    ∇

    ∇ r←DoBulk(sql values);bulk;cur;nulls;n
      cur←db,'.i'
      n←≢⊃⍣(1=≢⍴values)⊢values
      r←Catch SQA.Prepare cur sql('Bulk'n)
      r←Catch SQA.X cur,⍥⊆values
     ⍝ ,⍥⊆ above allows SQAPL nulls matrix to be provided stranded with values
      r←Catch SQA.Close cur
    ∇

    ∇ r←{ucs}Do sql
   ⍝ Execute SQL statement. If SELECT, return result.
      :If 0=⎕NC'ucs' ⋄ ucs←0 ⋄ :EndIf  ⍝ Unicode convert these columns
      r←Catch SQA.Do db sql
      :If 0=⊃r
          :If 5=≢r
              r←3 1⊃r
              (ucs/r)←FromUTF8¨ucs/r
          :EndIf
      :ElseIf '08S01'≡2 1⊃r           ⍝ SQL Server has gone away, attempt to reconnect
          SQA.Close db
          Connect ##.GetEnv¨'SQL_DATABASE' 'SQL_PASSWORD' 'SQL_USER'
          r←ucs Do sql
      :Else
          (1 ⎕JSON 3⊃r)⎕SIGNAL 501   ⍝ Other SQL error
      :EndIf
    ∇

    ∇ r←Columns table
      r←1↓4(⌷⍤1)2⊃Catch SQA.Columns db table
    ∇

    :endsection

    :section SCHEMA_PROCESSING

      StatementsFromSchema←{
     ⍝ ⍵: Simple char vec        :: path to .sql file
     ⍝ ←: Nested vec of char vec :: SQL statements
          (txt enc nl)←⎕NGET ⍵
          sql←'/\*.+\*/'⎕R''⍠'Greedy' 0⊢txt   ⍝ Remove comments
          sql←' '@(∊∘(⎕UCS nl))sql            ⍝ Replace newlines with spaces
          sql←' '∘(1↓,⊢⍤/⍨1(⊢∨⌽)0,≠)sql       ⍝ Remove leading, trailing, duplicate blanks
          ';'(≠⊆⊢)sql                         ⍝ Split on semicolons
      }

    ∇ msg←SetupSchema dum;create_migrations;folder;schema_definitions;sequence;latest;migrations;migration;batch;sql
      create_migrations←⊃⎕NGET ##.GLOBAL.app_dir,'/sql/migrations.sql'
      Do create_migrations
     
      folder←##.GetEnv'schema_defs'
      schema_definitions←(⊂∘⍋⌷⊢)'.*\d+-.*.sql'⎕S'&'⊃0(⎕NINFO⍠'Wildcard' 1)folder
      sequence←∊2⊃¨⎕VFI¨⊃¨'-'(≠⊆⊢)¨2⊃¨⎕NPARTS¨schema_definitions
     
      :If 0=⊃latest←SQA.Do db'select max(batch) from migrations'
          (migrations sequence)←(schema_definitions sequence)↓⍨¨3 1⊃latest   ⍝ Database exists, apply after most recent migration
      :Else
          migrations←schema_definitions
      :EndIf
      :For (migration batch) :InEach (migrations sequence)
          sql←StatementsFromSchema migration
          SQA.Do¨(⊂db)∘,¨⊂¨sql
          SQA.Do db'insert into migrations (`migration`,`batch`) values (:file<C255:,:num<I:);'migration batch
      :EndFor
      msg←'Finished SetupSchema'
    ∇

      ProcessTableInformation←{
          table_information←2⊃SQA.Columns db
          h←1⌷table_information ⋄ d←1↓table_information   ⍝ Header; Data
          ##.GLOBAL.tables←∪d[;h⍳⊂'TABLE_NAME']
          tc←⎕CSV(##.GLOBAL.app_dir,'/sql/type_conversions.csv')⍬ 4  ⍝ Type conversions matrix
          cz←d[;h⍳⊂'COLUMN_SIZE']
          ti←(⊢/tc)⍳d[;h⍳⊂'DATA_TYPE']
          ∨/ti>≢tc:('Unknown column types in rows ',⍕⍸ti>≢tc)⎕SIGNAL 101
          tn←tc[ti;2]
          sqat←('<'∘=⊂⊢)∊(⍕¨cz/⍨'⎕'∘∊¨tn)@('⎕'∘=)∊tn   ⍝ Replace ⎕ with numeric field widths (COLUMN_SIZE) in SQAPL type definitions
          t←d[;h⍳⊂'TABLE_NAME']
          ##.GLOBAL.tables←∪t
          ##.GLOBAL.type_sqapl←t⊢∘⊂⌸sqat
          ##.GLOBAL.columns←t⊢∘⊂⌸d[;h⍳⊂'COLUMN_NAME']
          'Processed table information'
      }

    :endsection

:EndNamespace
