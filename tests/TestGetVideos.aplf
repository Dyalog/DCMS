 TestGetVideos←{
     ⍺←'http://localhost:8081/' ⋄ url←⍺,'videos'
     G←url∘HttpGet
     fields←'description' 'event' 'category' 'presenter' 'title' 'url' 'youtube_id' 'published_at'
     _←Assert∧/fields∊(⊃G'').⎕NL-⍳9              ⍝ all videos
     vid←'/AFvfBE19OFg'                          ⍝ ⍰ known existing video youtube ID
     _←Assert∧/fields∊(G vid).⎕NL-⍳9             ⍝ single video
     q←'?v=AFvfBE19OFg'                          ⍝ ⍰ known existing video youtube ID
     _←Assert∧/fields∊(G vid).⎕NL-⍳9             ⍝ single video (NEW)
     p←⊂'Morten Kromberg' ⋄ q←'?search=morten'   ⍝ ⍰ known existing presenter
     _←Assert p∊(G q).presenter                  ⍝ search videos
     q←'?search=rich%20rank'                       ⍝ ⍰ known valid search terms
     _←Assert∧/fields∊(⊃G q).⎕NL-⍳9              ⍝ multiple search terms
     q←'?presenter=morten'                       ⍝ ⍰ known existing presenter
     _←Assert p∊(G q).presenter                  ⍝ by presenter
     evt←⊂'Dyalog ''21' ⋄ q←'?event=dyalog21'
     _←Assert evt∊(G q).event                    ⍝ by event
     q←'?search=&presenter=&event='
     _←Assert∧/fields∊(⊃G q).⎕NL-⍳9              ⍝ all parameters empty
     q←'?sort=newest'
     _←Assert(⊢≡{⍵[⍒⍵]})(G q).published_at       ⍝ sort by newest
     q←'?from=2021-05-01'
     _←Assert'2021 5 1'(∧/≤)_DateTimeCompare(G q).published_at   ⍝ datefrom
     q←'?to=2020-01-01'
     _←Assert'2021 5 1'(∧/≥)_DateTimeCompare(G q).published_at   ⍝ dateto
     q←'?from=2016-01-01&to=2018-01-01'
     _←Assert('2016 1 1' '2018 1 1')RangeContains _DateTimeCompare(G q).published_at
     q←'?per_page=10'
     pf←⊆'current_page' 'last_page' 'per_page'   ⍝ fields for paginated responses
     pf,←⊆'first_page_url' 'last_page_url' 'prev_page_url' 'next_page_url'
     pf,←⊆'data' 'links' 'path'
     pf,←⊆'from' 'to' 'total'
     _←Assert∧/pf∊(⊃G q).⎕NL-⍳9                  ⍝ paginated result
     q←'?per_page=10&page=3'
     _←Assert 3=(⊃G q).current_page              ⍝ paginated result on particular page
     q←'?search=',vid,'&per_page=10'
     _←Assert 1=≢(G q).data                      ⍝ per_page=10 & one result
     vid←'/NOTVALID'                             ⍝ invalid ID
     _←Assert 404=(#.HttpCommand.Get ⍺,vid).HttpStatus
     vid←'/RIGHTLENGTH'                          ⍝ video not found
     _←Assert 404=(#.HttpCommand.Get ⍺,vid).HttpStatus
     1
 }
