 response←resource Query qp;sql;sql_response
⍝ resource: table (or view) to search
⍝ qp: query parameters matrix, each row is a query (parameter)(value)
⍝ ←: Database entries containing search text
 table←#.GLOBAL.tables⍳⊂resource
 (parameters values)←↓⍉qp
 values←values/¨⍨~∧/¨' '=¨values   ⍝ Clear empty values

⍝ No query, return whole table
 db←#.DCMS.db
 FromUTF8←'UTF-8'⎕UCS ⎕UCS
 utf8←table⊃#.GLOBAL.utf8_columns
 :If 0∊⍴qp
     sql←'SELECT * FROM ',resource
     #.DCMS.Catch sql_response←#.SQA.Do db sql
     response←⎕JSON ⎕JSON⊂2,⊂(table⊃#.GLOBAL.columns)⍪⍉FromUTF8¨@utf8⍉3 1⊃sql_response
     :Return
 :EndIf

⍝ Parameters are either API parameters or text search for specific columns in a table
⍝ API Parameters:
⍝ s: search title
⍝ paginate: number of results to return
⍝ page: which "page" of paginated results

⍝ to do: InitResources provides information that Query uses to know how to convert data?
⍝ to do: Bjorn will help with making driver do all UTF8 conversion

 Wild←'"%','%"',⍨⊢
 values,←⊂''   ⍝ Empty for parameter not found

⍝ Search according to query parameters "s" for search, or those that are names of columns in the table
 s←values⊃⍨parameters⍳⊂,'s'
 column_params←qp⌿⍨parameters∊table⊃#.GLOBAL.columns
 search←' WHERE '/⍨0∨.<≢¨s column_params
 RegexAnd←{∊')',⍨¨'(?=.*'∘,¨' '(≠⊆⊢)⍵}
 text_columns←1↓∊','∘,¨(table⊃#.GLOBAL.columns)/⍨(table⊃#.GLOBAL.type_names)∊'CHAR' 'VARCHAR' ⍝'TEXT' is large
 search,←{0<≢⍵:' CONCAT(',text_columns,') regexp ("',(RegexAnd ⍵),'")' ⋄ ''}s
 Like←⊣,' LIKE ',⊢
 And←⊣,' AND ',⊢
 search,←{0<≢⍵:(' AND '/⍨0<≢s),⊃And⌿Like⌿Wild¨@2⍉column_params⌿¨⍨~∧/¨' '=¨⍵ ⋄ ''}column_params

⍝ Paginate adds a LIMIT
 per_page←values⊃⍨parameters⍳⊂'paginate'
 page←values⊃⍨parameters⍳⊂'page'
⍝ 0<≢per_page   no pagination, no limit
⍝ 0<≢page       from←1
 (page per_page)←{0∊⍴⍵:⊂⍬ ⋄ ⍵}⊃(//⎕VFI)page,' ',per_page
 from←1⌈per_page×¯1+page ⋄ has_limit←0<≢per_page
 limit←(' LIMIT '/⍨has_limit),(⍕¯1+from),(has_limit/', '),⍕per_page

⍝ Execute SQL statement
 sql←'SELECT * FROM ',resource,search,limit
 sql #.DCMS.Catch sql_response←#.SQA.Do db sql
 data←⎕JSON ⎕JSON⊂2,⊂(table⊃#.GLOBAL.columns)⍪⍉FromUTF8¨@utf8⍉3 1⊃sql_response

⍝ No pagination, return entire result
 :If 0∊⍴page ⋄ response←data ⋄ :Return ⋄ :EndIf

⍝ Build paginated response
 response←⎕JSON'{}'
 sql←'SELECT COUNT(*) row_count FROM ',resource,search
 response.total←⍬⍴⊃(//⎕VFI)⊃3 1⊃#.SQA.Do db sql
 response.current_page←page
 response.per_page←per_page
 response.(last_page←⌈total÷per_page)
 response.from←from
 response.to←per_page×page

 response.links←⍬

⍝response←Paginate response

⍝ currentInFinal

 current_in_initial←10≥page+3
 initial←⍳response.last_page⌊2 10[1+current_in_initial]                                    ⍝ First 2, 10 or all
 current_in_final←response.(current_page last_page>.-3 10)∧~current_in_initial
 has_final←response.last_page>10
 final←response.last_page+final_length-⍨⍳has_final×final_length←2 10[1+current_in_final]   ⍝ Last 2, 10 or empty
 range←page+¯4+⍳7×has_final∧current_in_initial⍲current_in_final                            ⍝ Page(-,+)3 or empty

 link_pages←(page-1),initial,range,final,page+1
 url←#.DCMS.service.url,'/',table,'?page='
 prev_url←{page=1:⊂'null' ⋄ url,⍕page-1}⍬
 next_url←{response.(current_page=last_page):⊂'null' ⋄ url,⍕page+1}⍬
 link_urls←prev_url,⍥⊆(url∘,¨⍕¨initial,range,final),⍥⊆next_url
 link_labels←'&laquo; Previous',⍥⊆(⍕¨initial,range,final),⍥⊆'Next &raquo;'
 link_active←'false' 'true'[1+page=link_pages]
 Link←url∘{link←⎕JSON'{}' ⋄ link.url←1⊃⍵ ⋄ link.label←2⊃⍵ ⋄ link.active←3⊃⍵ ⋄ link}
 response.links←Link¨↓⍉↑link_urls link_labels link_active

 response.data←data
