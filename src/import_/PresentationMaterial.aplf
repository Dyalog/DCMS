 rc←PresentationMaterial csv;opts;data;Col;evt;eid;idx;bad;event_id;title;header;pm_data;table;columns;types;values;sql;current;all_cols;exists;ids;db_pm;db_pres;type;media_id;presentation_id;title_url
⍝ rc:
⍝     0: 201 Created
⍝  else: Error
⍝ TODO Response should include data that was created

⍝ Create and update `presentation` and `presenter` tables

 rc←0

 data←⎕CSV csv'S'
 Col←((1⌷data)(1↓data))∘{(h t)←⍺ ⋄ t[;h⍳⍥⎕C⊆⍵]}
 (evt eid)←↓⍉##.SQL.Do'SELECT title,id FROM event'
 idx←evt⍳Col'event'
 :If ∨/bad←idx>≢evt
     rc←409('Event: ',((⊣,',',⊢)/bad/evt),' not found in event table')
     :Return
 :EndIf
 event_id←eid[idx]
 title←(⍕¨Col'code'),¨': '∘,¨Col'title'

⍝ insert: text url
⍝ get:    pmid
 header←'text' 'url'
 pm_data←header⍪Col'Link text' 'Link URL'

 table←'presentation_material'
 (columns types values)←table PrepareCSV FromUTF8 pm_data ⎕CSV'' 'S'
 sql←'SELECT * FROM ',table
 current←#.DCMS.SQL.Do sql
 all_cols←#.GLOBAL.(columns⊃⍨tables⍳⊆)table
 (exists ids)←(columns values)('text' 'url'Compare)(all_cols current)
 (columns types values),←⊂¨'updated_by' '<C128' 'DCMS_Import_PresentationMaterial'
 UpdateInsertExternalResource(table exists ids columns types values)

 db_pm←##.SQL.Do'SELECT id,text,url FROM presentation_material'
 db_pres←##.SQL.Do'SELECT presentation.id,presentation.title,event.title FROM presentation LEFT JOIN event ON event_id=event.id'
 type←⊂'media'
 media_id←(db_pm[;1],0)[db_pm[;2 3]⍳Col'link text' 'link url']
 presentation_id←(db_pres[;1],0)[db_pres[;2 3]⍳title,⍪Col'event']
 title_url←Col'link text' 'link url'
 header←'title' 'url' 'type' 'presentation_id' 'media_id'
 pm_data←header⍪(0≠presentation_id)⌿title_url,type,presentation_id,⍪media_id

 table←'media'

 opts←⎕NS''
 opts.table←'media'
 opts.data←pm_data ⎕CSV''
 opts.compare←'presentation_id' 'media_id'
 opts.updated_by←'DCMS_Import_PresentationMaterial'

 ImportExternalResource opts






⍝
