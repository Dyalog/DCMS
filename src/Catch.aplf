 {msg}←{action}Catch error_info;_Depth2;Trunc;RNC;en;info
                  ⍝ Dr A?
 msg←error_info   ⍝ Pass information through
⍝ One-stop shop error handling, logging and signalling
⍝ try (en info)←error_info; otherwise just log ⍕¨⊆error_info
⍝      en: error number   <0     =0   >0
⍝                       warning  ok  error
⍝    info: any relevant information from previous function call

⍝  action: what was being attempted?

 _Depth2←{⍺←⊢           ⍝ Apply function to
     2≥|≡⍺ ⍵ ⍵:⍺ ⍺⍺ ⍵   ⍝ (⍺ and) ⍵ depth 2: apply operand fn
     ⍺ ∇¨⍵              ⍝ (⍺ or) ⍵ deeper: recurse
 }

 :If 0=⎕NC'action' ⋄ action←'' ⋄ :EndIf

 :If 0=2|⎕DR⊃error_info                  ⍝ Numeric error code not provided
     error_info←500,⊆error_info
 :EndIf
 error_info←⊃¨⊆¨error_info
 en←⊃error_info
 info←⊃⌽⊆error_info
 :Select ⊃#.GLOBAL.debug
 :CaseList 0
     :If 0≠en
         :If 0≠⎕NC'res'
             msg←res
             info←(⍕∊info)∩' ',(⊢,⎕C)⎕A,⎕D
             info req.Fail en
         :EndIf
     :EndIf
 :Case 1
     :If 0<en
         ⎕←error_info
         :If 0≠⎕NC'res'
             msg←res
             info←(⍕∊info)∩' ',(⊢,⎕C)⎕A,⎕D
             info req.Fail en
         :EndIf
     :Else
         Trunc←{1<≢⍴⍵:(⊢↑⍨10⌊≢)⍵ ⋄ ⍵}⍕   ⍝ Truncate output for session log
         RNC←~∘(⎕UCS 10 13)∘,_Depth2     ⍝ Remove newline characters for nicer output
         ⎕←Trunc RNC error_info
     :EndIf
 :Case 2
     :If 0<en
         error_info ⎕SIGNAL en
     :ElseIf 0>en
         ('WARNING: ',⍥⊆error_info)⎕SIGNAL|en
     :EndIf
 :EndSelect
